import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as r,c as u,d as s,a as n,b as a,w as p,e as t}from"./app-dDmHkibj.js";const d={},k=n("h1",{id:"container",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#container"},[n("span",null,"container")])],-1),h=n("p",null,"Register markdown custom containers in your VuePress site.",-1),m={href:"https://github.com/markdown-it/markdown-it-container",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-D</span> @vuepress/plugin-container@next
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> containerPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/plugin-container&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">containerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// options</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="container-syntax" tabindex="-1"><a class="header-anchor" href="#container-syntax"><span>Container Syntax</span></a></h2><div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code>::: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span> [info]
[content]
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <code>type</code> is required and should be specified via <a href="#type">type</a> option.</li><li>The <code>info</code> is optional, and the default value can be specified via <code>defaultInfo</code> in <a href="#locales">locales</a> option.</li><li>The <code>content</code> can be any valid markdown content.</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This plugin can be used multiple times to support different types of containers.</p></div><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>Options</span></a></h2><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h3>`,9),v=n("li",null,[n("p",null,[a("Type: "),n("code",null,"string")])],-1),g=n("p",null,"Details:",-1),b=n("p",null,"The type of the container.",-1),_=n("code",null,"name",-1),y={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"locales",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#locales"},[n("span",null,"locales")])],-1),x=t(`<li><p>Type: <code>Record&lt;string, { defaultInfo: string }&gt;</code></p></li><li><p>Details:</p><p>The default <code>info</code> of the container in different locales.</p><p>If this option is not specified, the default <code>info</code> will fallback to the uppercase of the <a href="#type">type</a> option.</p></li><li><p>Example:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">containerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">&#39;tip&#39;</span><span class="token punctuation">,</span>
      locales<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          defaultInfo<span class="token operator">:</span> <span class="token string">&#39;TIP&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;/zh/&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          defaultInfo<span class="token operator">:</span> <span class="token string">&#39;提示&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),T=n("p",null,"Also see:",-1),I=t('<h3 id="before" tabindex="-1"><a class="header-anchor" href="#before"><span>before</span></a></h3><ul><li><p>Type: <code>(info: string) =&gt; string</code></p></li><li><p>Default:</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>info<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div class=&quot;custom-container </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p class=&quot;custom-container-title&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Details:</p><p>A function to render the starting tag of the container.</p><p>The first param is the <code>info</code> part of <a href="#container-syntax">container syntax</a>.</p><p>This option will not take effect if you don&#39;t specify the <a href="#after">after</a> option.</p></li></ul><h3 id="after" tabindex="-1"><a class="header-anchor" href="#after"><span>after</span></a></h3><ul><li><p>Type: <code>(info: string) =&gt; string</code></p></li><li><p>Default:</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&lt;/div&gt;\\n&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>Details:</p><p>A function to render the ending tag of the container.</p><p>The first param is the <code>info</code> part of <a href="#container-syntax">container syntax</a>.</p><p>This option will not take effect if you don&#39;t specify the <a href="#before">before</a> option.</p></li></ul><h3 id="render" tabindex="-1"><a class="header-anchor" href="#render"><span>render</span></a></h3>',9),D=t(`<li><p>Type:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MarkdownItContainerRenderFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  tokens<span class="token operator">:</span> Token<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
  env<span class="token operator">:</span> MarkdownEnv<span class="token punctuation">,</span>
  self<span class="token operator">:</span> Renderer<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),C=n("p",null,"Details:",-1),N=n("code",null,"render",-1),R={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[a("This plugin uses a default "),n("code",null,"render"),a(" function. If you specify this option, the default "),n("code",null,"render"),a(" function will be replaced, and the "),n("a",{href:"#locales"},"locales"),a(", "),n("a",{href:"#before"},"before"),a(" and "),n("a",{href:"#after"},"after"),a(" options will be ignored.")],-1),B=n("h3",{id:"validate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#validate"},[n("span",null,"validate")])],-1),E=n("li",null,[n("p",null,[a("Type: "),n("code",null,"(params: string) => boolean")])],-1),P=n("p",null,"Details:",-1),V=n("code",null,"validate",-1),L={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"},A=n("h3",{id:"marker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#marker"},[n("span",null,"marker")])],-1),$=n("li",null,[n("p",null,[a("Type: "),n("code",null,"string")])],-1),M=n("p",null,"Details:",-1),S=n("code",null,"marker",-1),z={href:"https://github.com/markdown-it/markdown-it-container#api",target:"_blank",rel:"noopener noreferrer"};function F(G,O){const l=o("NpmBadge"),e=o("ExternalLinkIcon"),i=o("RouterLink");return r(),u("div",null,[k,s(l,{package:"@vuepress/plugin-container"}),h,n("p",null,[a("This plugin simplifies the use of "),n("a",m,[a("markdown-it-container"),s(e)]),a(", but also retains its original capabilities.")]),n("p",null,[a("The "),s(i,{to:"/reference/default-theme/markdown.html#custom-containers"},{default:p(()=>[a("Custom Containers")]),_:1}),a(" of default theme is powered by this plugin.")]),f,n("ul",null,[v,n("li",null,[g,b,n("p",null,[a("It will be used as the "),_,a(" param of "),n("a",y,[a("markdown-it-container"),s(e)]),a(".")])])]),w,n("ul",null,[x,n("li",null,[T,n("ul",null,[n("li",null,[s(i,{to:"/guide/i18n.html"},{default:p(()=>[a("Guide > I18n")]),_:1})])])])]),I,n("ul",null,[D,n("li",null,[C,n("p",null,[a("The "),N,a(" option of "),n("a",R,[a("markdown-it-container"),s(e)]),a(".")]),q])]),B,n("ul",null,[E,n("li",null,[P,n("p",null,[a("The "),V,a(" option of "),n("a",L,[a("markdown-it-container"),s(e)]),a(".")])])]),A,n("ul",null,[$,n("li",null,[M,n("p",null,[a("The "),S,a(" option of "),n("a",z,[a("markdown-it-container"),s(e)]),a(".")])])])])}const H=c(d,[["render",F],["__file","container.html.vue"]]);export{H as default};
